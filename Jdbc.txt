public class ConnectToDB {

    public static void main(String[] args) throws SQLException {

        Connection myConn = null;
        Statement myStmt = null;
        ResultSet myRs = null;

        String dbUrl = "jdbc:mysql://localhost:3306/employee";
        String user = "root";
        String pass = "kola";

        try {
            // 1. Get a connection to database
            myConn = DriverManager.getConnection(dbUrl, user, pass);

            // 2. Create a statement
            myStmt = myConn.createStatement();

            // 3. Execute SQL query
            myRs = myStmt.executeQuery("select * from empInfo");

            // 4. Process the result set
            while (myRs.next()) {
                System.out.println(myRs.getString("id") + ", " + myRs.getString("name"));
            }
        }
        catch (Exception exc) {
            exc.printStackTrace();
        }
        finally {
            if (myRs != null) {
                myRs.close();
            }

            if (myStmt != null) {
                myStmt.close();
            }

            if (myConn != null) {
                myConn.close();
            }
        }}}

-----stored procedure-----

public class CallStoredProcedure {

    public static void main(String[] args) throws Exception {

        Connection myConn = null;
        CallableStatement myStmt = null;

        try {
            // Get a connection to database
            myConn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/employee", "root", "kola");

            String theDepartment = "HR";
            int theIncreaseAmount = 10000;

            // Show salaries BEFORE
            System.out.println("Salaries BEFORE\n");
            showSalaries(myConn, theDepartment);

            // Prepare the stored procedure call
            myStmt = myConn
                    .prepareCall("{call increase_salaries_for_department(?, ?)}");

            // Set the parameters
            myStmt.setString(1, theDepartment);
            myStmt.setDouble(2, theIncreaseAmount);

            // Call stored procedure
            System.out.println("\n\nCalling stored procedure.  increase_salaries_for_department('" + theDepartment + "', " + theIncreaseAmount + ")");
            myStmt.execute();
            System.out.println("Finished calling stored procedure");

            // Show salaries AFTER
            System.out.println("\n\nSalaries AFTER\n");
            showSalaries(myConn, theDepartment);

        } catch (Exception exc) {
            exc.printStackTrace();
        } finally {
            close(myConn, myStmt, null);
        }
    }

    private static void showSalaries(Connection myConn, String theDepartment) throws SQLException {
        PreparedStatement myStmt = null;
        ResultSet myRs = null;

        try {
            // Prepare statement
            myStmt = myConn.prepareStatement("select * from empInfo where department=?");

            myStmt.setString(1, theDepartment);
 
            // Execute SQL query
            myRs = myStmt.executeQuery();

            // Process result set
            while (myRs.next()) {
                int id = myRs.getInt("id");
                String name = myRs.getString("name");
                int age = myRs.getInt("age");
                String address = myRs.getString("address");
                double salary = myRs.getDouble("salary");
                String department = myRs.getString("department");

//                System.out.printf("%d, %s, %d,%s,%f%n,%s", id, name,age,address, department, salary);

                System.out.println("id= "+id+"name= "+name+"age= "+age+"address= "+address+"department= "+department+"salary= "+salary);
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        } finally {
            close(myStmt, myRs);

        }

    }

    private static void close(Connection myConn, Statement myStmt,
                              ResultSet myRs) throws SQLException {
        if (myRs != null) {
            myRs.close();
        }

        if (myStmt != null) {
            myStmt.close();
        }

        if (myConn != null) {
            myConn.close();
        }
    }

    private static void close(Statement myStmt, ResultSet myRs)
            throws SQLException {

        close(null, myStmt, myRs);
    }
}

-----prepared statement----
public class PreparedStatement {

        public static void main(String[] args) throws SQLException {

            Connection myConn = null;
            java.sql.PreparedStatement myStmt = null;
            ResultSet myRs = null;

            try {

                myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/employee", "root" , "kola");


                myStmt = myConn.prepareStatement("select * from empInfo where salary > ? and department=?");

                myStmt.setDouble(1, 80000);
                myStmt.setString(2, "HR");


                myRs = myStmt.executeQuery();


                display(myRs);

                // Reuse the prepared statement:  salary > 25000,  department = HR
                System.out.println("\n\nReuse the prepared statement:  salary > 25000,  department = HR");

                myStmt.setDouble(1, 25000);
                myStmt.setString(2, "IT");

                myRs = myStmt.executeQuery();

                display(myRs);


            }catch (Exception exc) {
                exc.printStackTrace();
            }
            finally {
                if (myRs != null) {
                    myRs.close();
                }

                if (myStmt != null) {
                    myStmt.close();
                }

                if (myConn != null) {
                    myConn.close();
                }
            }
        }

        private static void display(ResultSet myRs) throws SQLException {
            while (myRs.next()) {
                String name = myRs.getString("name");
                String address = myRs.getString("address");
                double salary = myRs.getDouble("salary");
                String department = myRs.getString("department");

                System.out.printf("%s, %s, %.2f, %s\n", name, address, salary, department);
            }
        }
}
